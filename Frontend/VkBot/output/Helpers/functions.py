import asyncio
import json
import os

import pika

EXCHANGE_NAME = "input_exchange"

def process_request(data):

    amqp_url = os.environ['AMQP_URL']
    url_params = pika.URLParameters(amqp_url)


    # connect to rabbitmq
    connection = pika.BlockingConnection(url_params)
    channel = connection.channel()

    channel.exchange_declare(exchange=EXCHANGE_NAME, exchange_type='direct')
    severity = "sum"

    # Sending the message
    channel.basic_publish(
        exchange=EXCHANGE_NAME, routing_key=severity, body=json.dumps(data))

    print(f" [x] Sent {severity}:{data}")
    connection.close()



def check_ai_marker(original_string):
    return "Generated by dataminds" in original_string or "[club225246870|@club225246870" in original_string or "Generate by dataminds" in original_string


def make_perfect_answer(summary_answer, select_messages_count):
    answer = f"""Результат суммаризации {select_messages_count} сообщений:

{summary_answer}

Generated by dataminds 
    """
    return answer


